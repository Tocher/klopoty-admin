{"version":3,"sources":["authProvider.js","tasks.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["login","username","localStorage","setItem","Promise","resolve","logout","removeItem","checkError","status","reject","checkAuth","getItem","getPermissions","TaskList","props","List","Datagrid","rowClick","TextField","source","EmailField","dataProvider","jsonServerProvider","App","Admin","authProvider","Resource","name","options","label","icon","PostIcon","list","edit","EditGuesser","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAAe,GAEXA,MAAO,YAAmB,IAAhBC,EAAe,EAAfA,SAGN,OAFAC,aAAaC,QAAQ,WAAYF,GAE1BG,QAAQC,WAGnBC,OAAQ,WAEJ,OADAJ,aAAaK,WAAW,YACjBH,QAAQC,WAGnBG,WAAY,YAAiB,IAAdC,EAAa,EAAbA,OACX,OAAe,MAAXA,GAA6B,MAAXA,GAClBP,aAAaK,WAAW,YACjBH,QAAQM,UAEZN,QAAQC,WAGnBM,UAAW,WACP,OAAOT,aAAaU,QAAQ,YACtBR,QAAQC,UACRD,QAAQM,UAGlBG,eAAgB,kBAAMT,QAAQC,Y,+DCxBrBS,EAAW,SAACC,GAAD,OACpB,cAACC,EAAA,EAAD,2BAAUD,GAAV,aACI,eAACE,EAAA,EAAD,CAAUC,SAAS,OAAnB,UACI,cAACC,EAAA,EAAD,CAAWC,OAAO,OAClB,cAACD,EAAA,EAAD,CAAWC,OAAO,SAClB,cAACD,EAAA,EAAD,CAAWC,OAAO,aAClB,cAACC,EAAA,EAAD,CAAYD,OAAO,UACnB,cAACD,EAAA,EAAD,CAAWC,OAAO,0BCHxBE,EAAeC,YAAmB,wCAazBC,EAZH,kBACR,cAACC,EAAA,EAAD,CAAOH,aAAcA,EAAcI,aAAcA,EAAjD,SACI,cAACC,EAAA,EAAD,CACIC,KAAK,QACLC,QAAS,CAAEC,MAAO,8CAClBC,KAAMC,IACNC,KAAMnB,EACNoB,KAAMC,SCDHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4cb1f1b4.chunk.js","sourcesContent":["export default {\n    // called when the user attempts to log in\n    login: ({ username }) => {\n        localStorage.setItem('username', username);\n        // accept all username/password combinations\n        return Promise.resolve();\n    },\n    // called when the user clicks on the logout button\n    logout: () => {\n        localStorage.removeItem('username');\n        return Promise.resolve();\n    },\n    // called when the API returns an error\n    checkError: ({ status }) => {\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('username');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n    // called when the user navigates to a new location, to check for authentication\n    checkAuth: () => {\n        return localStorage.getItem('username')\n            ? Promise.resolve()\n            : Promise.reject();\n    },\n    // called when the user navigates to a new location, to check for permissions / roles\n    getPermissions: () => Promise.resolve(),\n};\n","import * as React from \"react\";\nimport { List, Datagrid, TextField, EmailField } from 'react-admin';\n\nexport const TaskList = (props: any) => (\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <TextField source=\"username\" />\n            <EmailField source=\"email\" />\n            <TextField source=\"address.street\" />\n        </Datagrid>\n    </List>\n);\n","import * as React from \"react\";\nimport { Admin, Resource, EditGuesser } from 'react-admin';\nimport jsonServerProvider from 'ra-data-json-server';\nimport authProvider from './authProvider';\nimport PostIcon from '@material-ui/icons/Book';\nimport {TaskList} from './tasks';\n\nconst dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\nconst App = () => (\n    <Admin dataProvider={dataProvider} authProvider={authProvider}>\n        <Resource\n            name=\"users\"\n            options={{ label: 'Задания' }}\n            icon={PostIcon}\n            list={TaskList}\n            edit={EditGuesser}\n        />\n    </Admin>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}